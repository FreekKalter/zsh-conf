#!/usr/bin/env perl
#===============================================================================
#         FILE: ls.pl
#
#        USAGE: ./ls.pl
#
#  DESCRIPTION: Color output of folders with dirty git work dir.
#
#       AUTHOR: Freek Kalter,
#      COMPANY: Kalter&Co
#      VERSION: 1.0
#      CREATED: 09/19/2012 05:12:45 PM
#===============================================================================
use 5.016000;    # v5.16
use strict;
use warnings;
use Carp;
use Path::Class;
use Cwd;
use File::Basename;
use Getopt::Long;
use Term::ANSIColor;
use Net::GitHub::V3;
use Parallel::ForkManager 0.7.6;
use IPC::Open3 qw( open3 );
use Symbol;
use POSIX qw( floor ceil );
use Unicode::Collate;

my $help = '';
GetOptions( 'help' => \$help);

my %colors = (
    "dirty" => 'red bold',
    "no_version_control" => 'blue bold',
    "no_remote" => 'blue on_red',
    "fetch_failed" => 'white on_red',
    "branch_ahead" => 'green bold on_yellow',
    "branch_behind" => 'red on_yellow',
);

if ($help){
    say "\tAll up to date\n";
    say colored("\tNot under version control\n", $colors{no_version_control});
    say colored("\tDirty work directory\n", $colors{dirty});
    say colored("\tNo (known) remote\n", $colors{no_remote} );
    say colored("\tCould not fetch from remote\n", $colors{fetch_failed} );
    say colored("\tBranch ahead of remote\n", $colors{branch_ahead});
    say colored("\tBranch behind remote\n", $colors{branch_behind});
    exit 0;
}

my $pm = Parallel::ForkManager->new(30);
my ($writer, $reader, $err, $pid);
$err = gensym;

#open(my $fh, "<", "/home/fkalter/.git_credentials") or croak "Can't open git credentials: $!";
#my %cred = map{ split /= | \s+/x; } <$fh>;
#my $gh = Net::GitHub::V3->new(\%cred);
#my @repos = map { $_->{name} } $gh->repos->list;

my $dir = cwd();

opendir(my $dh, $dir) or croak "Can't open $dir $!";

my @files = map { file($dir, $_) }
  grep { !/^\.{1,2}$/x } readdir($dh);
my @results;
$pm -> run_on_finish ( # called BEFORE the first call to start()
    sub {
        my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
        # retrieve data structure from child
        if (defined($data_structure_reference)) {  # children are not forced to send anything
            push @results,  $data_structure_reference;  # child passed a string reference
        }
    }
);


for my $file (@files) {
    $pm->start and next;
    my $filename = basename($file);
    if (not -d $file) {
        $pm->finish(0, {filename => $filename});
    }

    # not under version control
    if (not -e dir($file, ".git")) {
        $pm->finish(0, { filename => $filename , state => 'no_version_control'} );
    }

    # get git status
    my $git_command = "git --git-dir=$filename/.git --work-tree=$filename ";
    $pid = open3($writer, $reader, $reader, qq($git_command status));
    waitpid($pid, 0);
    my $git_status = do { local $/ = undef; <$reader> };

    if ($git_status !~ /nothing to commit/) {

        # uncommitted changes (dirty working dir)
        $pm->finish(0, { filename => $filename , state => 'dirty'} );
    }

    # check if remote exists
    $pid = open3($writer, $reader, $reader, qq($git_command remote -v));
    waitpid($pid, 0);
    my ($return) = split(
        "\n",
        do { local $/ = undef; <$reader> }
    );
    my $address;

    if (!defined($return) || $return !~ /^\w+\s+(.*)\s+\(\w+\)$/x) {
        $pm->finish(0, { filename => $filename , state => 'no_remote'} ); # can't parse 'git remote -v' output
    } else {
        $address = $1 =~ s/\.git$//xr;
    }
    if ($address !~ /^http/x && $address !~ /^git\@bitbucket/x && $address !~ /^git\@github/x && $address !~ /^ssh/x) {
        $pm->finish(0, { filename => $filename , state => 'no_remote'} ); # can't parse 'git remote -v' output
    }

    # filter out remotes we cannot fetch from and print the in red background with white letters
    if ($address =~ /^http/x) {
        $pid = open3($writer, $reader, $err, qq(curl --head $address));
        waitpid($pid, 0);
        my $head = <$reader>;
        if (!$head || $head !~ /200/x) {
            # no internet or something else
            $pm->finish(0, { filename => $filename , state => 'fetch_failed'} );
        }
    }

    # if we get here, there is nothing to commit and the remote is (probably good to fetch from)
    $pid = open3($writer, $reader, $reader, qq($git_command fetch));
    waitpid($pid, 0);

    # if remote turns out to slip through earlyer checks
    # (stil print white on red to indicate remote problems)
    if (do { local $/ = undef; <$reader> } =~ /ERROR/) {
        $pm->finish(0, { filename => $filename , state => 'fetch failed'} );
    }

    $pid = open3($writer, $reader, $reader, qq($git_command status));
    waitpid($pid, 0);
    $git_status = do { local $/ = undef; <$reader> };

    if ($git_status =~ /branch is ahead of/) {
        $pm->finish(0, { filename => $filename , state => 'branch_ahead' } );
    } elsif ($git_status =~ /branch is behind/) {
        $pm->finish(0, { filename => $filename , state => 'branch_behind'} );
    }

    # Absolute nothign wrong with this dir
    $pm->finish(0, { filename => $filename });
}
$pm->wait_all_children;

# sort using proper unicode sorting method
#TODO dirs first/dirty first, make it more like ls by sorting column by column
my $collator = Unicode::Collate->new();
for my $res(@results){
    $res->{filename_sort_key} = $collator->getSortKey( $res->{filename} );
}
@results = sort{ $a->{filename_sort_key} cmp $b->{filename_sort_key} } @results;

&print_in_better_columns();

sub print_in_equal_columns{
    my $max = 0;
    for(@results){ $max = length($_->{filename}) if length($_->{filename}) > $max; }

    $max++; # put space after the widest word
    my $nr_of_columns = int($ENV{COLUMNS}/$max);
    my $nr_of_rows = ceil(($#results + 1)/$nr_of_columns);

    for( my $y=0;$y<$nr_of_rows; $y++) {
        for( my $x=0;$x <$nr_of_columns; $x++) {
            last if ( (my $index = $y*$nr_of_columns + $x) > $#results);

            my ($diff, $to_print)=(0, "");
            if( $results[$index]->{state} ){
                # compensate for colored words (color codes adds characters)
                $diff = length( colored( $results[$index]->{filename}, $colors{$results[$index]->{state}}))
                         - length($results[$index]->{filename});
                $to_print = colored( $results[$index]->{filename}, $colors{$results[$index]->{state}} );
            }else{
                $to_print = $results[$index]->{filename};
            }
            printf("%-*s", $max + $diff , $to_print);
        }
        print "\n";
    }
}


sub print_in_better_columns{
    # get a baseline, fill up first row to get a number of columns to work with
    my ($total_width, $nr_of_columns)= (0,0);
    for my $res (@results){
        last if( $total_width + length($res->{filename})+1 > $ENV{COLUMNS});
        $total_width += length($res->{filename}) +1;
        $nr_of_columns++;
    }
    my $nr_of_rows = ceil(($#results+1)/$nr_of_columns);

    # figure out how wide each columns is going to be
    my ($width, @column_widths);
    do{
        @column_widths= ();
        $width = 0;
        # get the widest field in the column ( this is how wide the columns going to be)
        for( my $x=0; $x < $nr_of_columns; $x++){
            my $max_column_width = 0;
            for(my $y=0; $y < $nr_of_rows; $y++){
                last if( (my $index = ($y * $nr_of_columns +$x)) > $#results );
                if( length($results[$index]->{filename}) > $max_column_width) {
                    $max_column_width = length($results[$index]->{filename});
                }
            }
            $width += $max_column_width +2;
            push @column_widths, $max_column_width ;
        }
        # if it can not be alligned with this number of rows, decrease the number of rows and try again
        if ($width > $ENV{COLUMNS}){
            $nr_of_columns--;
            $nr_of_rows = ceil(($#results+1)/$nr_of_columns);

        }
    }while($width > $ENV{COLUMNS});

    for( my $y=0;$y<$nr_of_rows; $y++) {
        for( my $x=0;$x <$nr_of_columns; $x++) {
            last if ( (my $index = $y*$nr_of_columns + $x) > $#results);
            my $to_print = $results[$index]->{state} ? colored($results[$index]->{filename}, $colors{$results[$index]->{state}})
                                                     : $results[$index]->{filename};
            my $diff = 0;
            if($results[$index]->{state}){
                $diff = length(colored ($results[$index]->{filename} ,$colors{$results[$index]->{state}})) - length($results[$index]->{filename});
            }
            printf("%-*s", $column_widths[$x] + $diff +2 , $to_print);
        }
        print "\n";
    }
}
