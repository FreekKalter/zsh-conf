#!/home/fkalter/perl
use 5.016000;
use warnings;
use strict;

use Carp;
use IPC::Open3 qw( open3 );
use Math::RandomOrg qw( randnum );
use Path::Tiny;

my $sock = "/home/fkalter/vlc-random.sock";
my $log  = "/home/fkalter/log.txt";
my $dir = "/media/truecrypt2/down/";
my $random_file = path($0)->parent->child("rand.txt");
chomp( my $rand = $random_file->slurp_utf8 );

my ($read, $write, $pid);

if (-e $sock) { # if vlc does not respond on current sock-file, delete it and create new one
    if (system("echo 'logout' | nc -U $sock")) {
        unlink $sock;
        &fork_vlc();
    }
}
else {
    &fork_vlc();
}

opendir(my $dh, $dir);
my @files = grep { !/^\.{1,2}/x } readdir($dh);
open(my $lh, ">>", $log) or croak "Could not open $log for writing: $!";

print $lh  $rand," ",  scalar(@files) , "\n";
close $lh;

my $to_add = $dir . $files[$rand];
$pid = open3($write, $read, $read, qq( echo "add $to_add" | nc -U $sock ));
waitpid($pid, 0);

my $status = do { local $/ = undef; <$read> };
if ($status =~ /menu select/) {
    $pid = open3($write, $read, $read, qq( echo "pause" | nc -U $sock ));
    waitpid($pid, 0);
    $pid = open3($write, $read, $read, qq( echo "add $to_add" | nc -U $sock ));
    waitpid($pid, 0);
}
close($lh);
$rand = int ( randnum(0, scalar @files) );
$random_file->spew_utf8("$rand\n");

sub fork_vlc {
    die "could not fork\n" unless defined($pid = fork);
    if (!$pid) {
        exec "vlc --extraintf oldrc --rc-unix $sock > /dev/null 2>&1";
    }
    sleep 2;
    return;
}
